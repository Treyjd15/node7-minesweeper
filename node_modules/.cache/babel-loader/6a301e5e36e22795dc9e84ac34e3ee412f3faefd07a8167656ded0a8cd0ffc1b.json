{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\td15j\\\\Desktop\\\\Node7-Minesweeper\\\\src\\\\components\\\\Board\\\\index.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Cell from \"../Cell\";\nimport \"C:\\Users\\td15j\\Desktop\\Node7-Minesweeper\\src\\App.js\";\nclass Board extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = this.getInitialState();\n    this.getRevealed = () => {\n      return this.state.grid.reduce((r, v) => {\n        r.push(...v);\n        return r;\n      }, []).map(v => v.isRevealed).filter(v => !!v).length;\n    };\n  }\n  getInitialState() {\n    const initialState = {\n      grid: this.createNewBoard(),\n      minesCount: this.props.mines,\n      gameStatus: this.props.gameStatus,\n      revealedCells: 0\n    };\n    return initialState;\n  }\n\n  // Board utilities\n  createNewBoard() {\n    let click = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    const grid = [];\n    const rows = this.props.width;\n    const columns = this.props.height;\n    const minesCount = this.props.mines;\n    const minesArray = this.getRandomMines(minesCount, columns, rows, click);\n    for (let i = 0; i < columns; ++i) {\n      grid.push([]);\n      for (let j = 0; j < rows; ++j) {\n        const gridCell = new GridCell(i, j, minesArray.includes(i * rows + j));\n        this.addGridCell(grid, gridCell);\n      }\n    }\n    return grid;\n  }\n  getRandomMines(amount, columns, rows) {\n    let starter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    const minesArray = [];\n    const limit = columns * rows;\n    const minesPool = [...Array(limit).keys()];\n    if (starter > 0 && starter < limit) {\n      minesPool.splice(starter, 1);\n    }\n    for (let i = 0; i < amount; ++i) {\n      const n = Math.floor(Math.random() * minesPool.length);\n      minesArray.push(...minesPool.splice(n, 1));\n    }\n    return minesArray;\n  }\n  addGridCell(grid, gridCell) {\n    const y = grid.length - 1;\n    const x = grid[y].length;\n    const lastGridCell = gridCell;\n    const neighbours = this.getNeighbours(grid, y, x);\n    for (let neighbourGridCell of neighbours) {\n      if (lastGridCell.isMine) {\n        neighbourGridCell.n += 1;\n      } else if (neighbourGridCell.isMine) {\n        lastGridCell.n += 1;\n      }\n    }\n    grid[y].push(gridCell);\n  }\n  revealBoard() {\n    const grid = this.state.grid;\n    for (const row of grid) {\n      for (const gridCell of row) {\n        gridCell.isRevealed = true;\n      }\n    }\n    this.setState({});\n  }\n  restartBoard() {\n    this.setState(this.getInitialState());\n  }\n\n  /* Helpers */\n  getNeighbours(grid, y, x) {\n    const neighbours = [];\n    const currentRow = grid[y];\n    const prevRow = grid[y - 1];\n    const nextRow = grid[y + 1];\n    if (currentRow[x - 1]) neighbours.push(currentRow[x - 1]);\n    if (currentRow[x + 1]) neighbours.push(currentRow[x + 1]);\n    if (prevRow) {\n      if (prevRow[x - 1]) neighbours.push(prevRow[x - 1]);\n      if (prevRow[x]) neighbours.push(prevRow[x]);\n      if (prevRow[x + 1]) neighbours.push(prevRow[x + 1]);\n    }\n    if (nextRow) {\n      if (nextRow[x - 1]) neighbours.push(nextRow[x - 1]);\n      if (nextRow[x]) neighbours.push(nextRow[x]);\n      if (nextRow[x + 1]) neighbours.push(nextRow[x + 1]);\n    }\n    return neighbours;\n  }\n  revealEmptyNeigbhours(grid, y, x) {\n    const neighbours = [...this.getNeighbours(grid, y, x)];\n    grid[y][x].isFlagged = false;\n    grid[y][x].isRevealed = true;\n    while (neighbours.length) {\n      const neighbourGridCell = neighbours.shift();\n      if (neighbourGridCell.isRevealed) {\n        continue;\n      }\n      if (neighbourGridCell.isEmpty) {\n        neighbours.push(...this.getNeighbours(grid, neighbourGridCell.y, neighbourGridCell.x));\n      }\n      neighbourGridCell.isFlagegd = false;\n      neighbourGridCell.isRevealed = true;\n    }\n  }\n  checkVictory() {\n    const {\n      height,\n      width,\n      mines\n    } = this.props;\n    const revealed = this.getRevealed();\n    if (revealed >= height * width - mines) {\n      this.killBoard(\"win\");\n    }\n  }\n  killBoard(type) {\n    const message = type === \"lost\" ? \"You lost.\" : \"You won.\";\n    this.setState({\n      gameStatus: message\n    }, () => {\n      this.revealBoard();\n    });\n  }\n\n  // Cell click handlers\n  handleLeftClick(y, x) {\n    const grid = this.state.grid;\n    const gridCell = grid[y][x];\n    gridCell.isClicked = true;\n\n    // Might want to add an \"isUnknown\" state later\n    if (gridCell.isRevealed || gridCell.isFlagged) {\n      return false;\n    }\n\n    // End game if mine\n    if (gridCell.isMine) {\n      this.killBoard(\"lost\");\n      return false;\n    }\n    if (gridCell.isEmpty) {\n      this.revealEmptyNeigbhours(grid, y, x);\n    }\n    gridCell.isFlagged = false;\n    gridCell.isRevealed = true;\n    this.setState({}, () => {\n      this.checkVictory();\n    });\n  }\n\n  // Cell right-click handler\n  handleRightClick(e, y, x) {\n    e.preventDefault();\n    const grid = this.state.grid;\n    let minesLeft = this.state.minesCount;\n\n    // Check if already revealed\n    if (grid[y][x].isRevealed) return false;\n    if (grid[y][x].isFlagged) {\n      grid[y][x].isFlagged = false;\n      minesLeft++;\n    } else {\n      grid[y][x].isFlagged = true;\n      minesLeft--;\n    }\n    this.setState({\n      minesCount: minesLeft\n    });\n  }\n\n  // Rendering functions\n  renderBoard() {\n    const grid = this.state.grid;\n    return grid.map(row => {\n      const rowCells = row.map(gridCell => /*#__PURE__*/React.createElement(Cell, {\n        key: gridCell.y * row.length + gridCell.x,\n        onClick: () => this.handleLeftClick(gridCell.y, gridCell.x),\n        cMenu: e => this.handleRightClick(e, gridCell.y, gridCell.x),\n        value: gridCell,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 9\n        }\n      }));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 14\n        }\n      }, rowCells);\n    });\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mines-count\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }\n    }, \"Mines: \", this.state.minesCount)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }\n    }, this.renderBoard()));\n  }\n}\nclass GridCell {\n  constructor(y, x, isMine) {\n    this.x = x;\n    this.y = y;\n    this.n = 0;\n    this.isMine = isMine;\n    this.isRevealed = false;\n    this.isFlagged = false;\n    this.isUnknown = false;\n    this.isClicked = false;\n  }\n  get isEmpty() {\n    return this.n === 0 && !this.isMine;\n  }\n}\n\n// Type checking With PropTypes\nBoard.propTypes = {\n  height: PropTypes.number,\n  width: PropTypes.number,\n  mines: PropTypes.number\n};\nexport default Board;","map":{"version":3,"names":["React","PropTypes","Cell","Board","Component","constructor","arguments","state","getInitialState","getRevealed","grid","reduce","r","v","push","map","isRevealed","filter","length","initialState","createNewBoard","minesCount","props","mines","gameStatus","revealedCells","click","undefined","rows","width","columns","height","minesArray","getRandomMines","i","j","gridCell","GridCell","includes","addGridCell","amount","starter","limit","minesPool","Array","keys","splice","n","Math","floor","random","y","x","lastGridCell","neighbours","getNeighbours","neighbourGridCell","isMine","revealBoard","row","setState","restartBoard","currentRow","prevRow","nextRow","revealEmptyNeigbhours","isFlagged","shift","isEmpty","isFlagegd","checkVictory","revealed","killBoard","type","message","handleLeftClick","isClicked","handleRightClick","e","preventDefault","minesLeft","renderBoard","rowCells","createElement","key","onClick","cMenu","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","render","isUnknown","propTypes","number"],"sources":["C:/Users/td15j/Desktop/Node7-Minesweeper/src/components/Board/index.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Cell from \"../Cell\";\n\n\nimport \"C:\\Users\\td15j\\Desktop\\Node7-Minesweeper\\src\\App.js\";\n\nclass Board extends React.Component {\n  state = this.getInitialState();\n\n  getInitialState() {\n    const initialState = {\n      grid: this.createNewBoard(),\n      minesCount: this.props.mines,\n      gameStatus: this.props.gameStatus,\n      revealedCells: 0\n    };\n    return initialState;\n  }\n\n  // Board utilities\n  createNewBoard(click = null) {\n    const grid = [];\n    const rows = this.props.width;\n    const columns = this.props.height;\n    const minesCount = this.props.mines;\n    const minesArray = this.getRandomMines(minesCount, columns, rows, click);\n\n    for (let i = 0; i < columns; ++i) {\n      grid.push([]);\n      for (let j = 0; j < rows; ++j) {\n        const gridCell = new GridCell(i, j, minesArray.includes(i * rows + j));\n        this.addGridCell(grid, gridCell);\n      }\n    }\n\n    return grid;\n  }\n\n  getRandomMines(amount, columns, rows, starter = null) {\n    const minesArray = [];\n    const limit = columns * rows;\n    const minesPool = [...Array(limit).keys()];\n\n    if (starter > 0 && starter < limit) {\n      minesPool.splice(starter, 1);\n    }\n\n    for (let i = 0; i < amount; ++i) {\n      const n = Math.floor(Math.random() * minesPool.length);\n      minesArray.push(...minesPool.splice(n, 1));\n    }\n\n    return minesArray;\n  }\n\n  addGridCell(grid, gridCell) {\n    const y = grid.length - 1;\n    const x = grid[y].length;\n    const lastGridCell = gridCell;\n    const neighbours = this.getNeighbours(grid, y, x);\n\n    for (let neighbourGridCell of neighbours) {\n      if (lastGridCell.isMine) {\n        neighbourGridCell.n += 1;\n      } else if (neighbourGridCell.isMine) {\n        lastGridCell.n += 1;\n      }\n    }\n\n    grid[y].push(gridCell);\n  }\n\n  revealBoard() {\n    const grid = this.state.grid;\n\n    for (const row of grid) {\n      for (const gridCell of row) {\n        gridCell.isRevealed = true;\n      }\n    }\n\n    this.setState({});\n  }\n\n  restartBoard() {\n    this.setState(this.getInitialState());\n  }\n\n  /* Helpers */\n  getNeighbours(grid, y, x) {\n    const neighbours = [];\n    const currentRow = grid[y];\n    const prevRow = grid[y - 1];\n    const nextRow = grid[y + 1];\n\n    if (currentRow[x - 1]) neighbours.push(currentRow[x - 1]);\n    if (currentRow[x + 1]) neighbours.push(currentRow[x + 1]);\n    if (prevRow) {\n      if (prevRow[x - 1]) neighbours.push(prevRow[x - 1]);\n      if (prevRow[x]) neighbours.push(prevRow[x]);\n      if (prevRow[x + 1]) neighbours.push(prevRow[x + 1]);\n    }\n    if (nextRow) {\n      if (nextRow[x - 1]) neighbours.push(nextRow[x - 1]);\n      if (nextRow[x]) neighbours.push(nextRow[x]);\n      if (nextRow[x + 1]) neighbours.push(nextRow[x + 1]);\n    }\n\n    return neighbours;\n  }\n\n  revealEmptyNeigbhours(grid, y, x) {\n    const neighbours = [...this.getNeighbours(grid, y, x)];\n    grid[y][x].isFlagged = false;\n    grid[y][x].isRevealed = true;\n\n    while (neighbours.length) {\n      const neighbourGridCell = neighbours.shift();\n\n      if (neighbourGridCell.isRevealed) {\n        continue;\n      }\n      if (neighbourGridCell.isEmpty) {\n        neighbours.push(\n          ...this.getNeighbours(grid, neighbourGridCell.y, neighbourGridCell.x)\n        );\n      }\n\n      neighbourGridCell.isFlagegd = false;\n      neighbourGridCell.isRevealed = true;\n    }\n  }\n\n  checkVictory() {\n    const { height, width, mines } = this.props;\n    const revealed = this.getRevealed();\n\n    if (revealed >= height * width - mines) {\n      this.killBoard(\"win\");\n    }\n  }\n\n  getRevealed = () => {\n    return this.state.grid\n      .reduce((r, v) => {\n        r.push(...v);\n        return r;\n      }, [])\n      .map(v => v.isRevealed)\n      .filter(v => !!v).length;\n  };\n\n  killBoard(type) {\n    const message = type === \"lost\" ? \"You lost.\" : \"You won.\";\n\n    this.setState({ gameStatus: message }, () => {\n      this.revealBoard();\n    });\n  }\n\n  // Cell click handlers\n  handleLeftClick(y, x) {\n    const grid = this.state.grid;\n    const gridCell = grid[y][x];\n\n    gridCell.isClicked = true;\n\n    // Might want to add an \"isUnknown\" state later\n    if (gridCell.isRevealed || gridCell.isFlagged) {\n      return false;\n    }\n\n    // End game if mine\n    if (gridCell.isMine) {\n      this.killBoard(\"lost\");\n      return false;\n    }\n\n    if (gridCell.isEmpty) {\n      this.revealEmptyNeigbhours(grid, y, x);\n    }\n\n    gridCell.isFlagged = false;\n    gridCell.isRevealed = true;\n\n    this.setState({}, () => {\n      this.checkVictory();\n    });\n  }\n\n  // Cell right-click handler\n  handleRightClick(e, y, x) {\n    e.preventDefault();\n    const grid = this.state.grid;\n    let minesLeft = this.state.minesCount;\n\n    // Check if already revealed\n    if (grid[y][x].isRevealed) return false;\n\n    if (grid[y][x].isFlagged) {\n      grid[y][x].isFlagged = false;\n      minesLeft++;\n    } else {\n      grid[y][x].isFlagged = true;\n      minesLeft--;\n    }\n\n    this.setState({\n      minesCount: minesLeft\n    });\n  }\n\n  // Rendering functions\n  renderBoard() {\n    const grid = this.state.grid;\n\n    return grid.map(row => {\n      const rowCells = row.map(gridCell => (\n        <Cell\n          key={gridCell.y * row.length + gridCell.x}\n          onClick={() => this.handleLeftClick(gridCell.y, gridCell.x)}\n          cMenu={e => this.handleRightClick(e, gridCell.y, gridCell.x)}\n          value={gridCell}\n        />\n      ));\n\n      return <div className=\"row\">{rowCells}</div>;\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"board\">\n        <div className=\"mines-count\">\n          <span>Mines: {this.state.minesCount}</span>\n        </div>\n        <div className=\"grid\">{this.renderBoard()}</div>\n      </div>\n    );\n  }\n}\n\nclass GridCell {\n  constructor(y, x, isMine) {\n    this.x = x;\n    this.y = y;\n    this.n = 0;\n    this.isMine = isMine;\n    this.isRevealed = false;\n    this.isFlagged = false;\n    this.isUnknown = false;\n    this.isClicked = false;\n  }\n  get isEmpty() {\n    return this.n === 0 && !this.isMine;\n  }\n}\n\n// Type checking With PropTypes\nBoard.propTypes = {\n  height: PropTypes.number,\n  width: PropTypes.number,\n  mines: PropTypes.number\n};\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}